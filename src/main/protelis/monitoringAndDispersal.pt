module monitoringAndDispersal

import java.lang.Math.*
import java.lang.Double.isFinite
import Overcrowding.*
import it.unibo.SimulationUtils.*
import protelis:coord:accumulation
import protelis:coord:sparsechoice
import protelis:state:time
import protelis:coord:meta
import protelis:coord:spreading
import protelis:lang:utils
import protelis:state:nonselfstabilizing:time
import it.unibo.protelisFunctions.ProtelisFunctions.* // for out.println(...)
import java.lang.System.out

def countNearby(range) {
	let human = rep(h <- env.get("role")==0) { h };
	foldSum(mux(human && nbrRange() < range) { 1 } else { 0 })
}

def densityEstimation(p, range, w) {
	countNearby(range) / (p * PI * range ^ 2 * w)
}

def dangerousDensity(p, range, dangerousDensity, groupSize, w) {
	let partition = S(range, nbrRange);
	let localDensity = densityEstimation(p, range, w);
	let avg = summarize(partition, sum, localDensity, 0) / summarize(partition, sum, 1, 0);
	let count = summarize(partition, sum, 1 / p, 0);
	avg > dangerousDensity && count > groupSize
}

def crowdTracking(p, range, w, crowdedDensity, dangerousThreshold, groupSize, timeFrame) {
	let densityEst = densityEstimation(p, range, w)
	env.put("densityEst", densityEst)
	if (isRecentEvent(densityEst > crowdedDensity, timeFrame)) {
		if (dangerousDensity(p, range, dangerousThreshold, groupSize, w)) {
			overcrowded()
		} else { atRisk() }
	} else { none() }
}

def vectorFrom(target) {
    let selfCoords = self.getCoordinates();
    let targetCoords = broadcast(target, self.getCoordinates());
	let xy = 2 * selfCoords - targetCoords;
	let k = 2.5;
	let lat = (xy.get(1) + selfCoords.get(1)*(k-1))/k;
	let long = (xy.get(0) + selfCoords.get(0)*(k-1))/k;
	env.put("self + target coords + xy + lat + long", selfCoords + " " + targetCoords + " " + xy + " " + lat + " " + long);
	if (isFinite(lat) && isFinite(long)) {
		[lat, long]
	} else {
		noAdvice()
	}
}

def noAdvice() { [NaN, NaN] }

def direction(radius, crowding) {
	mux (distanceTo(crowding == atRisk()) < radius) {
		vectorFrom(crowding == overcrowded())
	} else {
		noAdvice()
	}
}

def warning(radius, crowding) {
	distanceTo(crowding == atRisk()) < radius && crowding != overcrowded()
}

/*********** monitoring functions ***********/

def somewhereN(formula,n){
    let gd = if(env.get("gradientToUse")==0){
        let speed = env.get("infoSpeed");
        [bisGradient(formula, env.get("range"), speed), env.get("netDiameter")]
    } else {
        [hopDistanceTo(formula), env.get("netDiameterHops")]
    };
    let r = gd.get(0) < gd.get(1);
    env.put(n, r);
    env.put(n+"_g", gd.get(0));
    r
}

def somewhere(formula){
    let gd = if(env.get("gradientToUse")==0){
        let speed = env.get("infoSpeed");
        [bisGradient(formula, env.get("range"), speed), env.get("netDiameter")]
    } else {
        [hopDistanceTo(formula), env.get("netDiameterHops")]
    };
    let r = gd.get(0) < gd.get(1);
    r
}

def roundsince(cond) {
    rep (x <- 0) { mux (cond) { 0 } else { x + 1 } }
}

/********** SLCS (spatial logic for closure space) mappings to FC *******/

def interiorN(formula,w,n){ // square: true at points with all nbrs satisfying f
    let f = formula || w;
    env.putField(n+"_interior", nbr(""+formula+";"+f));
    let r = all(nbr(f)) || w;
    env.put(n+"_interiorRes", r);
    r
}

def interior(f){ // square: true at points with all nbrs satisfying f
    all(nbr(f))
}

def closure(f){ // diamond: true at points with some nbrs satisfying f
	any(nbr(f))
}

def reachesN(f1,f2,w,n) { // R: true at starting points of paths whose ending point satisfies f2 and where f1 holds
	if(f1 && !w){ somewhereN(f2,n) } else { false }
}

def reaches(f1,f2) { // R: true at starting points of paths whose ending point satisfies f2 and where f1 holds
	if(f1){ somewhere(f2) } else { false }
}

def surroundedByN(f1,f2,w,n){ // U: true at points in an area satisfying f1 whose neighbours satisfy f2
	f1 && interiorN(!reachesN(!f2,!f1,w,n),w,n)
}

def surroundedBy(f1,f2){ // U: true at points in an area satisfying f1 whose neighbours satisfy f2
	f1 && interior(!reaches(!f2,!f1))
}

def implies(f1,f2) {
	f1 <= f2
}

def changed(v) {
  !rep(x <- [v,v]){ [x.get(1),v] }.get(0).equals(v)
}

env.put("run", 1); // count number of devices running this program

let dangerousMolName = env.get("dangerousMolName");
let safeMolName = env.get("safeMolName");

/* CROWD ESTIMATION
 * In FOCAS:
 * p = 0.1; range = 15 // 30; wRange = 30 // 100; commRange = n.a.; avgThreshold = 2.17 people / m²;
 * sumThreshold = 300 people; maxDensity = 1.08 people / m²; timeFrame = 60; w = 0.25 (fraction of walkable space in the local urban environment) */
//countNearby(1000)
//densityEstimation(0.005, 60, 0.25)
//dangerousDensity(0.005, 30, 2.17, 300, 0.25)
let p = 0.005;   let crowdRange = 30;    let w = 0.25;    let crowdedDensity = 1.08;    let dangerousThreshold = 2.17;
let groupSize = 300; let timeFrame = 60;
let crowding = crowdTracking(p, crowdRange, w, crowdedDensity, dangerousThreshold, groupSize, timeFrame) // overcrowded(), atRisk(), or none()
env.put("crowding", crowding); env.put("crowdingInt", crowding.toInt());
env.put("risk", crowding == atRisk()); env.put("overcrowded", crowding == overcrowded());

// WARNING WHEN PROXIMATE TO DEVICES AT RISK (i.e., to DEVICES NEAR TO OVERCROWDED AREAS)
let proximityToCrowdForWarning = 100;
let isWarning = warning(proximityToCrowdForWarning, crowding);
env.put("warning", isWarning);

// SAFE PLACES AND DEVICE ROLES
let role = env.get("role");
let isHuman = role == 0; let isAccessPoint = role == 1; let isSafePlace = role == 2;
env.put(safeMolName, isSafePlace);

let id = self.getDeviceUID().toString(); // getDeviceUID() returns an object of type DeviceUID
let idInt = parseInt(id);
env.put("uid", id);
env.put("coord", self.getCoordinates());

let range = env.get("range")

let dangerous = crowding == overcrowded() || crowding == atRisk();
env.put(dangerousMolName, dangerous);

let numNbrs = 	foldSum(nbr(1));
let numNbrsDelta = numNbrs - rep(k <- [numNbrs,numNbrs]){ [k.get(1),numNbrs] }.get(0);
let differentCount = foldSum(mux(dangerous){ nbr(mux(!dangerous){1}else{0}) } else { nbr(mux(dangerous){1}else{0}) });
env.put("numNbrsDelta", numNbrsDelta);
env.put("differentCount", differentCount);
let hasDangerousNbrs = foldSum(nbr(mux(dangerous){ 1 } else { 0 })) > 0;
let optimise = if(env.has("optimise")){ env.get("optimise")==1 } else { false };
let waitAMoment = optimise && changed(self.getCoordinates()); // !rep(h <- [hasDangerousNbrs,hasDangerousNbrs]){ [h.get(1), hasDangerousNbrs] }.get(0);
env.put("changedCoords", waitAMoment);

let monitored = dangerous; // env.get("nodeMonitoringPredicate")(idInt);
env.put("monitored", monitored);
let monitoring = implies(dangerous, surroundedByN(dangerous, reachesN(!dangerous, isSafePlace,false,"reachesSafety"), waitAMoment, "surroundedBy"));

if(monitored){
    let monitoringOracle = monitoringPropertySatisfied(self.getEnvironmentAccess(), idInt);
    env.put("monitoringOracle", monitoringOracle);
    env.put("monitoring", monitoring);

    let monitoringDifference = monitoring != monitoringOracle;
    env.put("monitoringDifference", monitoringDifference);
    env.put("falsepositive", monitoring==true && monitoringOracle==false);
    env.put("falsenegative", monitoring==false && monitoringOracle==true);
    monitoring
} else {
    if(env.has("monitoringOracle")) { env.remove("monitoringOracle"); } else { false }
    if(env.has("monitoringDifference")) { env.remove("monitoringDifference"); } else { false }
    if(env.has("falsepositive")) { env.remove("falsepositive"); } else { false }
    if(env.has("falsenegative")) { env.remove("falsenegative"); } else { false }
    if(env.has("monitoring")) { env.remove("monitoring"); } else { false }
}

let dispersalTimeframe = if(env.has("dispersalTimeframe")){ env.get("dispersalTimeframe") } else { [99999,-1] };
let currTime = self.getCurrentTime();
if(currTime >= dispersalTimeframe.get(0) && currTime <= dispersalTimeframe.get(1)){
    let distToRiskZone = proximityToCrowdForWarning/3;
    let goto = direction(distToRiskZone, crowding);
    env.put("direction", goto != noAdvice());
    env.put("goto", goto);
    let crowd = isRecentEvent(isWarning && goto != noAdvice(), timeFrame/1.6);
    let follows = rep (f <- if(isHuman) { env.get("follows-advice") < env.get("pFollows") } else { false }) { f };
    let doStart = if(env.has("startDispersalOffset")){ currTime >= dispersalTimeframe.get(0) + env.get("startDispersalOffset") } else { true };
    env.put("following", crowd && follows && doStart);
    true
} else {
    env.put("following", false);
}